/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { handleError } from '../fn/custom-error-controller/handle-error';
import { HandleError$Params } from '../fn/custom-error-controller/handle-error';
import { handleError1 } from '../fn/custom-error-controller/handle-error-1';
import { HandleError1$Params } from '../fn/custom-error-controller/handle-error-1';
import { handleError2 } from '../fn/custom-error-controller/handle-error-2';
import { HandleError2$Params } from '../fn/custom-error-controller/handle-error-2';
import { handleError3 } from '../fn/custom-error-controller/handle-error-3';
import { HandleError3$Params } from '../fn/custom-error-controller/handle-error-3';
import { handleError4 } from '../fn/custom-error-controller/handle-error-4';
import { HandleError4$Params } from '../fn/custom-error-controller/handle-error-4';
import { handleError5 } from '../fn/custom-error-controller/handle-error-5';
import { HandleError5$Params } from '../fn/custom-error-controller/handle-error-5';
import { handleError6 } from '../fn/custom-error-controller/handle-error-6';
import { HandleError6$Params } from '../fn/custom-error-controller/handle-error-6';

@Injectable({ providedIn: 'root' })
export class CustomErrorControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `handleError()` */
  static readonly HandleErrorPath = '/error';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleError()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError$Response(params?: HandleError$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return handleError(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleError$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError(params?: HandleError$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.handleError$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `handleError3()` */
  static readonly HandleError3Path = '/error';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleError3()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError3$Response(params?: HandleError3$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return handleError3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleError3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError3(params?: HandleError3$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.handleError3$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `handleError2()` */
  static readonly HandleError2Path = '/error';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleError2()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError2$Response(params?: HandleError2$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return handleError2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleError2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError2(params?: HandleError2$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.handleError2$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `handleError5()` */
  static readonly HandleError5Path = '/error';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleError5()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError5$Response(params?: HandleError5$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return handleError5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleError5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError5(params?: HandleError5$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.handleError5$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `handleError6()` */
  static readonly HandleError6Path = '/error';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleError6()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError6$Response(params?: HandleError6$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return handleError6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleError6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError6(params?: HandleError6$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.handleError6$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `handleError1()` */
  static readonly HandleError1Path = '/error';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleError1()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError1$Response(params?: HandleError1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return handleError1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleError1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError1(params?: HandleError1$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.handleError1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `handleError4()` */
  static readonly HandleError4Path = '/error';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleError4()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError4$Response(params?: HandleError4$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return handleError4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleError4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handleError4(params?: HandleError4$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.handleError4$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

}
