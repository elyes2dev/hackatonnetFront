/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addWorkshop } from '../fn/workshop-controller/add-workshop';
import { AddWorkshop$Params } from '../fn/workshop-controller/add-workshop';
import { deleteWorkshop } from '../fn/workshop-controller/delete-workshop';
import { DeleteWorkshop$Params } from '../fn/workshop-controller/delete-workshop';
import { getAllWorkshops } from '../fn/workshop-controller/get-all-workshops';
import { GetAllWorkshops$Params } from '../fn/workshop-controller/get-all-workshops';
import { getWorkshopById } from '../fn/workshop-controller/get-workshop-by-id';
import { GetWorkshopById$Params } from '../fn/workshop-controller/get-workshop-by-id';
import { Workshop } from '../models/workshop';

@Injectable({ providedIn: 'root' })
export class WorkshopControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addWorkshop()` */
  static readonly AddWorkshopPath = '/workshops/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addWorkshop()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addWorkshop$Response(params: AddWorkshop$Params, context?: HttpContext): Observable<StrictHttpResponse<Workshop>> {
    return addWorkshop(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addWorkshop$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addWorkshop(params: AddWorkshop$Params, context?: HttpContext): Observable<Workshop> {
    return this.addWorkshop$Response(params, context).pipe(
      map((r: StrictHttpResponse<Workshop>): Workshop => r.body)
    );
  }

  /** Path part for operation `getAllWorkshops()` */
  static readonly GetAllWorkshopsPath = '/workshops';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllWorkshops()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorkshops$Response(params?: GetAllWorkshops$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Workshop>>> {
    return getAllWorkshops(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllWorkshops$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorkshops(params?: GetAllWorkshops$Params, context?: HttpContext): Observable<Array<Workshop>> {
    return this.getAllWorkshops$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Workshop>>): Array<Workshop> => r.body)
    );
  }

  /** Path part for operation `getWorkshopById()` */
  static readonly GetWorkshopByIdPath = '/workshops/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWorkshopById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkshopById$Response(params: GetWorkshopById$Params, context?: HttpContext): Observable<StrictHttpResponse<Workshop>> {
    return getWorkshopById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWorkshopById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkshopById(params: GetWorkshopById$Params, context?: HttpContext): Observable<Workshop> {
    return this.getWorkshopById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Workshop>): Workshop => r.body)
    );
  }

  /** Path part for operation `deleteWorkshop()` */
  static readonly DeleteWorkshopPath = '/workshops/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteWorkshop()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkshop$Response(params: DeleteWorkshop$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteWorkshop(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteWorkshop$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkshop(params: DeleteWorkshop$Params, context?: HttpContext): Observable<void> {
    return this.deleteWorkshop$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
