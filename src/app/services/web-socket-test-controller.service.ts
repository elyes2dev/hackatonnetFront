/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getWebSocketStatus } from '../fn/web-socket-test-controller/get-web-socket-status';
import { GetWebSocketStatus$Params } from '../fn/web-socket-test-controller/get-web-socket-status';
import { sendTestMessage } from '../fn/web-socket-test-controller/send-test-message';
import { SendTestMessage$Params } from '../fn/web-socket-test-controller/send-test-message';


/**
 * Endpoints for testing WebSocket functionality
 */
@Injectable({ providedIn: 'root' })
export class WebSocketTestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `sendTestMessage()` */
  static readonly SendTestMessagePath = '/api/websocket-test/send/{teamId}';

  /**
   * Send test message to WebSocket topic.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendTestMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendTestMessage$Response(params: SendTestMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return sendTestMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Send test message to WebSocket topic.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendTestMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendTestMessage(params: SendTestMessage$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.sendTestMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getWebSocketStatus()` */
  static readonly GetWebSocketStatusPath = '/api/websocket-test/status';

  /**
   * Test WebSocket connection status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWebSocketStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWebSocketStatus$Response(params?: GetWebSocketStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return getWebSocketStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Test WebSocket connection status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWebSocketStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWebSocketStatus(params?: GetWebSocketStatus$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.getWebSocketStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

}
