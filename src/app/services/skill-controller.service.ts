/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createSkill } from '../fn/skill-controller/create-skill';
import { CreateSkill$Params } from '../fn/skill-controller/create-skill';
import { deleteSkill } from '../fn/skill-controller/delete-skill';
import { DeleteSkill$Params } from '../fn/skill-controller/delete-skill';
import { getAllSkills } from '../fn/skill-controller/get-all-skills';
import { GetAllSkills$Params } from '../fn/skill-controller/get-all-skills';
import { getSkillById } from '../fn/skill-controller/get-skill-by-id';
import { GetSkillById$Params } from '../fn/skill-controller/get-skill-by-id';
import { Skill } from '../models/skill';
import { updateSkill } from '../fn/skill-controller/update-skill';
import { UpdateSkill$Params } from '../fn/skill-controller/update-skill';

@Injectable({ providedIn: 'root' })
export class SkillControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getSkillById()` */
  static readonly GetSkillByIdPath = '/api/skills/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSkillById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSkillById$Response(params: GetSkillById$Params, context?: HttpContext): Observable<StrictHttpResponse<Skill>> {
    return getSkillById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSkillById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSkillById(params: GetSkillById$Params, context?: HttpContext): Observable<Skill> {
    return this.getSkillById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Skill>): Skill => r.body)
    );
  }

  /** Path part for operation `updateSkill()` */
  static readonly UpdateSkillPath = '/api/skills/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSkill()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSkill$Response(params: UpdateSkill$Params, context?: HttpContext): Observable<StrictHttpResponse<Skill>> {
    return updateSkill(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSkill$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSkill(params: UpdateSkill$Params, context?: HttpContext): Observable<Skill> {
    return this.updateSkill$Response(params, context).pipe(
      map((r: StrictHttpResponse<Skill>): Skill => r.body)
    );
  }

  /** Path part for operation `deleteSkill()` */
  static readonly DeleteSkillPath = '/api/skills/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSkill()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSkill$Response(params: DeleteSkill$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSkill(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSkill$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSkill(params: DeleteSkill$Params, context?: HttpContext): Observable<void> {
    return this.deleteSkill$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllSkills()` */
  static readonly GetAllSkillsPath = '/api/skills';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSkills()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSkills$Response(params?: GetAllSkills$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Skill>>> {
    return getAllSkills(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSkills$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSkills(params?: GetAllSkills$Params, context?: HttpContext): Observable<Array<Skill>> {
    return this.getAllSkills$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Skill>>): Array<Skill> => r.body)
    );
  }

  /** Path part for operation `createSkill()` */
  static readonly CreateSkillPath = '/api/skills';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSkill()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSkill$Response(params: CreateSkill$Params, context?: HttpContext): Observable<StrictHttpResponse<Skill>> {
    return createSkill(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSkill$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSkill(params: CreateSkill$Params, context?: HttpContext): Observable<Skill> {
    return this.createSkill$Response(params, context).pipe(
      map((r: StrictHttpResponse<Skill>): Skill => r.body)
    );
  }

}
