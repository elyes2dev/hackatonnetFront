/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { addTeamMember } from '../fn/team-members-controller/add-team-member';
import { AddTeamMember$Params } from '../fn/team-members-controller/add-team-member';
import { deleteTeamMember } from '../fn/team-members-controller/delete-team-member';
import { DeleteTeamMember$Params } from '../fn/team-members-controller/delete-team-member';
import { getAllTeamMembers } from '../fn/team-members-controller/get-all-team-members';
import { GetAllTeamMembers$Params } from '../fn/team-members-controller/get-all-team-members';
import { getTeamMemberById } from '../fn/team-members-controller/get-team-member-by-id';
import { GetTeamMemberById$Params } from '../fn/team-members-controller/get-team-member-by-id';
import { getTeamMembersByTeamId } from '../fn/team-members-controller/get-team-members-by-team-id';
import { GetTeamMembersByTeamId$Params } from '../fn/team-members-controller/get-team-members-by-team-id';
import { TeamMembers } from '../models/team-members';
import { updateTeamMember } from '../fn/team-members-controller/update-team-member';
import { UpdateTeamMember$Params } from '../fn/team-members-controller/update-team-member';

@Injectable({ providedIn: 'root' })
export class TeamMembersControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  static readonly UpdateTeamMemberPath = '/api/team-members/update/{id}';
  static readonly AddTeamMemberPath = '/api/team-members/add';
  static readonly GetTeamMemberByIdPath = '/api/team-members/{id}';
  static readonly GetTeamMembersByTeamIdPath = '/api/team-members/team/{teamId}';
  static readonly GetAllTeamMembersPath = '/api/team-members/all';
  static readonly DeleteTeamMemberPath = '/api/team-members/delete/{id}';

  updateTeamMember$Response(params: UpdateTeamMember$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamMembers>> {
    return updateTeamMember(this.http, this.rootUrl, params, context);
  }

  updateTeamMember(params: UpdateTeamMember$Params, context?: HttpContext): Observable<TeamMembers> {
    return this.updateTeamMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamMembers>): TeamMembers => r.body)
    );
  }

  addTeamMember$Response(params: AddTeamMember$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamMembers>> {
    return addTeamMember(this.http, this.rootUrl, params, context);
  }

  addTeamMember(params: AddTeamMember$Params, context?: HttpContext): Observable<TeamMembers> {
    return this.addTeamMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamMembers>): TeamMembers => r.body)
    );
  }

  getTeamMemberById$Response(params: GetTeamMemberById$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamMembers>> {
    return getTeamMemberById(this.http, this.rootUrl, params, context);
  }

  getTeamMemberById(params: GetTeamMemberById$Params, context?: HttpContext): Observable<TeamMembers> {
    return this.getTeamMemberById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamMembers>): TeamMembers => r.body)
    );
  }

  getTeamMembersByTeamId$Response(params: GetTeamMembersByTeamId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TeamMembers>>> {
    return getTeamMembersByTeamId(this.http, this.rootUrl, params, context); // Fixed to use getTeamMembersByTeamId
  }

  getTeamMembersByTeamId(params: GetTeamMembersByTeamId$Params, context?: HttpContext): Observable<Array<TeamMembers>> {
    return this.getTeamMembersByTeamId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TeamMembers>>): Array<TeamMembers> => r.body)
    );
  }

  getAllTeamMembers$Response(params?: GetAllTeamMembers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TeamMembers>>> {
    return getAllTeamMembers(this.http, this.rootUrl, params, context);
  }

  getAllTeamMembers(params?: GetAllTeamMembers$Params, context?: HttpContext): Observable<Array<TeamMembers>> {
    return this.getAllTeamMembers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TeamMembers>>): Array<TeamMembers> => r.body)
    );
  }

  deleteTeamMember$Response(params: DeleteTeamMember$Params, context?: HttpContext): Observable<StrictHttpResponse<{}>> {
    return deleteTeamMember(this.http, this.rootUrl, params, context);
  }

  deleteTeamMember(params: DeleteTeamMember$Params, context?: HttpContext): Observable<{}> {
    return this.deleteTeamMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body)
    );
  }
}