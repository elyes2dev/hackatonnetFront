/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createOrUpdateResource } from '../fn/resources-controller/create-or-update-resource';
import { CreateOrUpdateResource$Params } from '../fn/resources-controller/create-or-update-resource';
import { deleteResourceById } from '../fn/resources-controller/delete-resource-by-id';
import { DeleteResourceById$Params } from '../fn/resources-controller/delete-resource-by-id';
import { getAllResources } from '../fn/resources-controller/get-all-resources';
import { GetAllResources$Params } from '../fn/resources-controller/get-all-resources';
import { getResourceById } from '../fn/resources-controller/get-resource-by-id';
import { GetResourceById$Params } from '../fn/resources-controller/get-resource-by-id';
import { Resources } from '../models/resources';

@Injectable({ providedIn: 'root' })
export class ResourcesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllResources()` */
  static readonly GetAllResourcesPath = '/resources';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllResources()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllResources$Response(params?: GetAllResources$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Resources>>> {
    return getAllResources(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllResources$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllResources(params?: GetAllResources$Params, context?: HttpContext): Observable<Array<Resources>> {
    return this.getAllResources$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Resources>>): Array<Resources> => r.body)
    );
  }

  /** Path part for operation `createOrUpdateResource()` */
  static readonly CreateOrUpdateResourcePath = '/resources';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOrUpdateResource()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrUpdateResource$Response(params: CreateOrUpdateResource$Params, context?: HttpContext): Observable<StrictHttpResponse<Resources>> {
    return createOrUpdateResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOrUpdateResource$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrUpdateResource(params: CreateOrUpdateResource$Params, context?: HttpContext): Observable<Resources> {
    return this.createOrUpdateResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<Resources>): Resources => r.body)
    );
  }

  /** Path part for operation `getResourceById()` */
  static readonly GetResourceByIdPath = '/resources/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResourceById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceById$Response(params: GetResourceById$Params, context?: HttpContext): Observable<StrictHttpResponse<Resources>> {
    return getResourceById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResourceById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceById(params: GetResourceById$Params, context?: HttpContext): Observable<Resources> {
    return this.getResourceById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Resources>): Resources => r.body)
    );
  }

  /** Path part for operation `deleteResourceById()` */
  static readonly DeleteResourceByIdPath = '/resources/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteResourceById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResourceById$Response(params: DeleteResourceById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteResourceById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteResourceById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResourceById(params: DeleteResourceById$Params, context?: HttpContext): Observable<void> {
    return this.deleteResourceById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
