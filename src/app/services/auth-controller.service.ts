/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getLogin } from '../fn/auth-controller/get-login';
import { GetLogin$Params } from '../fn/auth-controller/get-login';
import { login } from '../fn/auth-controller/login';
import { Login$Params } from '../fn/auth-controller/login';
import { resetPassword } from '../fn/auth-controller/reset-password';
import { ResetPassword$Params } from '../fn/auth-controller/reset-password';
import { savePassword } from '../fn/auth-controller/save-password';
import { SavePassword$Params } from '../fn/auth-controller/save-password';
import { showChangePasswordPage } from '../fn/auth-controller/show-change-password-page';
import { ShowChangePasswordPage$Params } from '../fn/auth-controller/show-change-password-page';
import { signup } from '../fn/auth-controller/signup';
import { Signup$Params } from '../fn/auth-controller/signup';

@Injectable({ providedIn: 'root' })
export class AuthControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `signup()` */
  static readonly SignupPath = '/auth/signup';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `signup()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  signup$Response(params: Signup$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return signup(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `signup$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  signup(params: Signup$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.signup$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `savePassword()` */
  static readonly SavePasswordPath = '/auth/savePassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `savePassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePassword$Response(params: SavePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return savePassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `savePassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePassword(params: SavePassword$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.savePassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `resetPassword()` */
  static readonly ResetPasswordPath = '/auth/reset_password';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resetPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetPassword$Response(params: ResetPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return resetPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resetPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetPassword(params: ResetPassword$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.resetPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `getLogin()` */
  static readonly GetLoginPath = '/auth/login';

  /**
   * Get login instructions.
   *
   * Returns instructions to use POST /login instead.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLogin()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLogin$Response(params?: GetLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * Get login instructions.
   *
   * Returns instructions to use POST /login instead.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLogin$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLogin(params?: GetLogin$Params, context?: HttpContext): Observable<void> {
    return this.getLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `login()` */
  static readonly LoginPath = '/auth/login';

  /**
   * Authenticate user and generate JWT token.
   *
   * Provide username and password to receive a JWT token for authentication.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `login()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login$Response(params: Login$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return login(this.http, this.rootUrl, params, context);
  }

  /**
   * Authenticate user and generate JWT token.
   *
   * Provide username and password to receive a JWT token for authentication.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `login$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login(params: Login$Params, context?: HttpContext): Observable<string> {
    return this.login$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `showChangePasswordPage()` */
  static readonly ShowChangePasswordPagePath = '/auth/changePassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `showChangePasswordPage()` instead.
   *
   * This method doesn't expect any request body.
   */
  showChangePasswordPage$Response(params: ShowChangePasswordPage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return showChangePasswordPage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `showChangePasswordPage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  showChangePasswordPage(params: ShowChangePasswordPage$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.showChangePasswordPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
