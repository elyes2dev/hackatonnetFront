/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteScore } from '../fn/user-quiz-score-controller/delete-score';
import { DeleteScore$Params } from '../fn/user-quiz-score-controller/delete-score';
import { getQuizScores } from '../fn/user-quiz-score-controller/get-quiz-scores';
import { GetQuizScores$Params } from '../fn/user-quiz-score-controller/get-quiz-scores';
import { getUserQuizScore } from '../fn/user-quiz-score-controller/get-user-quiz-score';
import { GetUserQuizScore$Params } from '../fn/user-quiz-score-controller/get-user-quiz-score';
import { getUserScores } from '../fn/user-quiz-score-controller/get-user-scores';
import { GetUserScores$Params } from '../fn/user-quiz-score-controller/get-user-scores';
import { hasUserTakenQuiz } from '../fn/user-quiz-score-controller/has-user-taken-quiz';
import { HasUserTakenQuiz$Params } from '../fn/user-quiz-score-controller/has-user-taken-quiz';
import { saveScore } from '../fn/user-quiz-score-controller/save-score';
import { SaveScore$Params } from '../fn/user-quiz-score-controller/save-score';
import { UserQuizScore } from '../models/user-quiz-score';

@Injectable({ providedIn: 'root' })
export class UserQuizScoreControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveScore()` */
  static readonly SaveScorePath = '/score';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveScore()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveScore$Response(params: SaveScore$Params, context?: HttpContext): Observable<StrictHttpResponse<UserQuizScore>> {
    return saveScore(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveScore$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveScore(params: SaveScore$Params, context?: HttpContext): Observable<UserQuizScore> {
    return this.saveScore$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserQuizScore>): UserQuizScore => r.body)
    );
  }

  /** Path part for operation `getUserScores()` */
  static readonly GetUserScoresPath = '/score/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserScores()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserScores$Response(params: GetUserScores$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserQuizScore>>> {
    return getUserScores(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserScores$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserScores(params: GetUserScores$Params, context?: HttpContext): Observable<Array<UserQuizScore>> {
    return this.getUserScores$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserQuizScore>>): Array<UserQuizScore> => r.body)
    );
  }

  /** Path part for operation `getUserQuizScore()` */
  static readonly GetUserQuizScorePath = '/score/user/{userId}/quiz/{quizId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserQuizScore()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserQuizScore$Response(params: GetUserQuizScore$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getUserQuizScore(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserQuizScore$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserQuizScore(params: GetUserQuizScore$Params, context?: HttpContext): Observable<number> {
    return this.getUserQuizScore$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteScore()` */
  static readonly DeleteScorePath = '/score/user/{userId}/quiz/{quizId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteScore()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteScore$Response(params: DeleteScore$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteScore(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteScore$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteScore(params: DeleteScore$Params, context?: HttpContext): Observable<void> {
    return this.deleteScore$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `hasUserTakenQuiz()` */
  static readonly HasUserTakenQuizPath = '/score/user/{userId}/quiz/{quizId}/exists';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hasUserTakenQuiz()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasUserTakenQuiz$Response(params: HasUserTakenQuiz$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return hasUserTakenQuiz(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hasUserTakenQuiz$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasUserTakenQuiz(params: HasUserTakenQuiz$Params, context?: HttpContext): Observable<boolean> {
    return this.hasUserTakenQuiz$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getQuizScores()` */
  static readonly GetQuizScoresPath = '/score/quiz/{quizId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getQuizScores()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuizScores$Response(params: GetQuizScores$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserQuizScore>>> {
    return getQuizScores(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getQuizScores$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuizScores(params: GetQuizScores$Params, context?: HttpContext): Observable<Array<UserQuizScore>> {
    return this.getQuizScores$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserQuizScore>>): Array<UserQuizScore> => r.body)
    );
  }

}
