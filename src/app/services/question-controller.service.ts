/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createQuestion } from '../fn/question-controller/create-question';
import { CreateQuestion$Params } from '../fn/question-controller/create-question';
import { deleteQuestion } from '../fn/question-controller/delete-question';
import { DeleteQuestion$Params } from '../fn/question-controller/delete-question';
import { getAllQuestions } from '../fn/question-controller/get-all-questions';
import { GetAllQuestions$Params } from '../fn/question-controller/get-all-questions';
import { getQuestionById } from '../fn/question-controller/get-question-by-id';
import { GetQuestionById$Params } from '../fn/question-controller/get-question-by-id';
import { Question } from '../models/question';
import { updateQuestion } from '../fn/question-controller/update-question';
import { UpdateQuestion$Params } from '../fn/question-controller/update-question';

@Injectable({ providedIn: 'root' })
export class QuestionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getQuestionById()` */
  static readonly GetQuestionByIdPath = '/question/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getQuestionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuestionById$Response(params: GetQuestionById$Params, context?: HttpContext): Observable<StrictHttpResponse<Question>> {
    return getQuestionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getQuestionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuestionById(params: GetQuestionById$Params, context?: HttpContext): Observable<Question> {
    return this.getQuestionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Question>): Question => r.body)
    );
  }

  /** Path part for operation `updateQuestion()` */
  static readonly UpdateQuestionPath = '/question/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateQuestion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuestion$Response(params: UpdateQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<Question>> {
    return updateQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateQuestion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuestion(params: UpdateQuestion$Params, context?: HttpContext): Observable<Question> {
    return this.updateQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<Question>): Question => r.body)
    );
  }

  /** Path part for operation `deleteQuestion()` */
  static readonly DeleteQuestionPath = '/question/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteQuestion()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuestion$Response(params: DeleteQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteQuestion$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuestion(params: DeleteQuestion$Params, context?: HttpContext): Observable<void> {
    return this.deleteQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllQuestions()` */
  static readonly GetAllQuestionsPath = '/question';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllQuestions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllQuestions$Response(params?: GetAllQuestions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Question>>> {
    return getAllQuestions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllQuestions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllQuestions(params?: GetAllQuestions$Params, context?: HttpContext): Observable<Array<Question>> {
    return this.getAllQuestions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Question>>): Array<Question> => r.body)
    );
  }

  /** Path part for operation `createQuestion()` */
  static readonly CreateQuestionPath = '/question';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createQuestion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuestion$Response(params: CreateQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<Question>> {
    return createQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createQuestion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuestion(params: CreateQuestion$Params, context?: HttpContext): Observable<Question> {
    return this.createQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<Question>): Question => r.body)
    );
  }

}
