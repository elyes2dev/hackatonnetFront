/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createResource } from '../fn/ressources-controller/create-resource';
import { CreateResource$Params } from '../fn/ressources-controller/create-resource';
import { deleteResource } from '../fn/ressources-controller/delete-resource';
import { DeleteResource$Params } from '../fn/ressources-controller/delete-resource';
import { Document } from '../models/document';
import { downloadDocument } from '../fn/ressources-controller/download-document';
import { DownloadDocument$Params } from '../fn/ressources-controller/download-document';
import { getAllResources1 } from '../fn/ressources-controller/get-all-resources-1';
import { GetAllResources1$Params } from '../fn/ressources-controller/get-all-resources-1';
import { getResource } from '../fn/ressources-controller/get-resource';
import { GetResource$Params } from '../fn/ressources-controller/get-resource';
import { ImageModel } from '../models/image-model';
import { Resources } from '../models/resources';
import { updateResource } from '../fn/ressources-controller/update-resource';
import { UpdateResource$Params } from '../fn/ressources-controller/update-resource';
import { uploadDocument } from '../fn/ressources-controller/upload-document';
import { UploadDocument$Params } from '../fn/ressources-controller/upload-document';
import { uploadImage } from '../fn/ressources-controller/upload-image';
import { UploadImage$Params } from '../fn/ressources-controller/upload-image';

@Injectable({ providedIn: 'root' })
export class RessourcesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getResource()` */
  static readonly GetResourcePath = '/api/workshops/{workshopId}/resources/{resourceId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResource()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResource$Response(params: GetResource$Params, context?: HttpContext): Observable<StrictHttpResponse<Resources>> {
    return getResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResource$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResource(params: GetResource$Params, context?: HttpContext): Observable<Resources> {
    return this.getResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<Resources>): Resources => r.body)
    );
  }

  /** Path part for operation `updateResource()` */
  static readonly UpdateResourcePath = '/api/workshops/{workshopId}/resources/{resourceId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateResource()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateResource$Response(params: UpdateResource$Params, context?: HttpContext): Observable<StrictHttpResponse<Resources>> {
    return updateResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateResource$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateResource(params: UpdateResource$Params, context?: HttpContext): Observable<Resources> {
    return this.updateResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<Resources>): Resources => r.body)
    );
  }

  /** Path part for operation `deleteResource()` */
  static readonly DeleteResourcePath = '/api/workshops/{workshopId}/resources/{resourceId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteResource()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResource$Response(params: DeleteResource$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteResource$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResource(params: DeleteResource$Params, context?: HttpContext): Observable<void> {
    return this.deleteResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllResources1()` */
  static readonly GetAllResources1Path = '/api/workshops/{workshopId}/resources';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllResources1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllResources1$Response(params: GetAllResources1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Resources>>> {
    return getAllResources1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllResources1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllResources1(params: GetAllResources1$Params, context?: HttpContext): Observable<Array<Resources>> {
    return this.getAllResources1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Resources>>): Array<Resources> => r.body)
    );
  }

  /** Path part for operation `createResource()` */
  static readonly CreateResourcePath = '/api/workshops/{workshopId}/resources';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createResource()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createResource$Response(params: CreateResource$Params, context?: HttpContext): Observable<StrictHttpResponse<Resources>> {
    return createResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createResource$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createResource(params: CreateResource$Params, context?: HttpContext): Observable<Resources> {
    return this.createResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<Resources>): Resources => r.body)
    );
  }

  /** Path part for operation `uploadImage()` */
  static readonly UploadImagePath = '/api/workshops/{workshopId}/resources/{resourceId}/images';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadImage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadImage$Response(params: UploadImage$Params, context?: HttpContext): Observable<StrictHttpResponse<ImageModel>> {
    return uploadImage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadImage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadImage(params: UploadImage$Params, context?: HttpContext): Observable<ImageModel> {
    return this.uploadImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImageModel>): ImageModel => r.body)
    );
  }

  /** Path part for operation `uploadDocument()` */
  static readonly UploadDocumentPath = '/api/workshops/{workshopId}/resources/{resourceId}/documents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadDocument()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadDocument$Response(params: UploadDocument$Params, context?: HttpContext): Observable<StrictHttpResponse<Document>> {
    return uploadDocument(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadDocument$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadDocument(params: UploadDocument$Params, context?: HttpContext): Observable<Document> {
    return this.uploadDocument$Response(params, context).pipe(
      map((r: StrictHttpResponse<Document>): Document => r.body)
    );
  }

  /** Path part for operation `downloadDocument()` */
  static readonly DownloadDocumentPath = '/api/workshops/{workshopId}/resources/{resourceId}/documents/{documentId}/download';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadDocument()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadDocument$Response(params: DownloadDocument$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return downloadDocument(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadDocument$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadDocument(params: DownloadDocument$Params, context?: HttpContext): Observable<Blob> {
    return this.downloadDocument$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
