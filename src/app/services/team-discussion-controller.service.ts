/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteDiscussion } from '../fn/team-discussion-controller/delete-discussion';
import { DeleteDiscussion$Params } from '../fn/team-discussion-controller/delete-discussion';
import { getChatInfo } from '../fn/team-discussion-controller/get-chat-info';
import { GetChatInfo$Params } from '../fn/team-discussion-controller/get-chat-info';
import { getParticipants } from '../fn/team-discussion-controller/get-participants';
import { GetParticipants$Params } from '../fn/team-discussion-controller/get-participants';
import { getTeamDiscussions } from '../fn/team-discussion-controller/get-team-discussions';
import { GetTeamDiscussions$Params } from '../fn/team-discussion-controller/get-team-discussions';
import { getUnreadCount } from '../fn/team-discussion-controller/get-unread-count';
import { GetUnreadCount$Params } from '../fn/team-discussion-controller/get-unread-count';
import { markAsRead } from '../fn/team-discussion-controller/mark-as-read';
import { MarkAsRead$Params } from '../fn/team-discussion-controller/mark-as-read';
import { sendMessageRest } from '../fn/team-discussion-controller/send-message-rest';
import { SendMessageRest$Params } from '../fn/team-discussion-controller/send-message-rest';
import { TeamDiscussion } from '../models/team-discussion';

@Injectable({ providedIn: 'root' })
export class TeamDiscussionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `markAsRead()` */
  static readonly MarkAsReadPath = '/api/team-discussions/{discussionId}/read';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead$Response(params: MarkAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return markAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead(params: MarkAsRead$Params, context?: HttpContext): Observable<{
}> {
    return this.markAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `sendMessageRest()` */
  static readonly SendMessageRestPath = '/api/team-discussions/send/{teamId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendMessageRest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendMessageRest$Response(params: SendMessageRest$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return sendMessageRest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendMessageRest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendMessageRest(params: SendMessageRest$Params, context?: HttpContext): Observable<{
}> {
    return this.sendMessageRest$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getUnreadCount()` */
  static readonly GetUnreadCountPath = '/api/team-discussions/unread/count/{teamId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnreadCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount$Response(params: GetUnreadCount$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return getUnreadCount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnreadCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount(params: GetUnreadCount$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.getUnreadCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getTeamDiscussions()` */
  static readonly GetTeamDiscussionsPath = '/api/team-discussions/team/{teamId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamDiscussions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamDiscussions$Response(params: GetTeamDiscussions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TeamDiscussion>>> {
    return getTeamDiscussions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamDiscussions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamDiscussions(params: GetTeamDiscussions$Params, context?: HttpContext): Observable<Array<TeamDiscussion>> {
    return this.getTeamDiscussions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TeamDiscussion>>): Array<TeamDiscussion> => r.body)
    );
  }

  /** Path part for operation `getParticipants()` */
  static readonly GetParticipantsPath = '/api/team-discussions/participants/{teamId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getParticipants()` instead.
   *
   * This method doesn't expect any request body.
   */
  getParticipants$Response(params: GetParticipants$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return getParticipants(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getParticipants$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getParticipants(params: GetParticipants$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.getParticipants$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getChatInfo()` */
  static readonly GetChatInfoPath = '/api/team-discussions/info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatInfo$Response(params: GetChatInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return getChatInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatInfo(params: GetChatInfo$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.getChatInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `deleteDiscussion()` */
  static readonly DeleteDiscussionPath = '/api/team-discussions/{discussionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDiscussion()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDiscussion$Response(params: DeleteDiscussion$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteDiscussion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDiscussion$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDiscussion(params: DeleteDiscussion$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteDiscussion$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  updateMessage(params: { teamId: number; messageId: number; body: Partial<TeamDiscussion> }): Observable<TeamDiscussion> {
    return this.http.put<TeamDiscussion>(
      `${this.rootUrl}/api/team-discussions/${params.teamId}/messages/${params.messageId}`,
      params.body,
      { context: new HttpContext() }
    );
  }

  sendTypingIndicator(params: { teamId: number; teamMemberId: number }): Observable<void> {
    return this.http.post<void>(
      `${this.rootUrl}/api/team-discussions/${params.teamId}/typing`,
      { teamMemberId: params.teamMemberId },
      { context: new HttpContext() }
    );
  }

  uploadFile(formData: FormData): Observable<TeamDiscussion> {
    return this.http.post<TeamDiscussion>(
      `${this.rootUrl}/api/team-discussions/upload`,
      formData
    );
  }
}
