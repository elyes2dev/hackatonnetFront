import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { MessageService } from 'primeng/api';
import { Team } from 'src/app/demo/models/team';
import { TeamService } from 'src/app/demo/services/team.service';

@Component({
  selector: 'app-team-form',
  templateUrl: './team-form.component.html',
  styleUrls: ['./team-form.component.scss'],
  providers: [MessageService]
})
export class TeamFormComponent implements OnInit {
  createTeamForm: FormGroup;
  isLoading = false;
  hackathons: any[] = []; // This would be populated from a HackathonService
  
  // Getter for team visibility status
  get isTeamPublic(): boolean {
    return this.createTeamForm?.get('isPublic')?.value === true;
  }

  constructor(
    private fb: FormBuilder,
    private teamService: TeamService,
    private router: Router,
    private messageService: MessageService
  ) {
    this.createTeamForm = this.fb.group({
      teamName: ['', [Validators.required, Validators.minLength(3)]],
      isPublic: [true],
      hackathonId: [null, Validators.required]
    });
  }

  ngOnInit(): void {
    // In a real implementation, you would load hackathons here
    // this.loadHackathons();
    
    // For demo purposes, adding a sample hackathon
    this.hackathons = [
      { id: 1, name: 'Sample Hackathon 2025' }
    ];
  }

  createTeam(): void {
    if (this.createTeamForm.invalid) {
      this.messageService.add({
        severity: 'error',
        summary: 'Error',
        detail: 'Please fill all required fields'
      });
      return;
    }

    this.isLoading = true;
    const formValue = this.createTeamForm.value;
    const newTeam: Team = {
      id: 0, // This will be assigned by the backend
      teamName: formValue.teamName,
      teamCode: '', // This will be generated by the backend
      isPublic: formValue.isPublic,
      isFull: false
    };

    const hackathonId = formValue.hackathonId;

    this.teamService.createTeam(newTeam, hackathonId).subscribe({
      next: (team) => {
        this.isLoading = false;
        this.messageService.add({
          severity: 'success',
          summary: 'Success',
          detail: `Team ${team.teamName} created successfully`
        });
        this.router.navigate(['/teams', team.id]);
      },
      error: (error) => {
        this.isLoading = false;
        console.error('Error creating team:', error);
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: error.message || 'Failed to create team. Please try again.'
        });
      }
    });
  }

  cancel(): void {
    this.router.navigate(['/teams']);
  }
}
